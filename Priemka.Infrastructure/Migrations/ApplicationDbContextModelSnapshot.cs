// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Priemka.Infrastructure;

#nullable disable

namespace Priemka.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Priemka.Domain.Entities.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("admins", (string)null);
                });

            modelBuilder.Entity("Priemka.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("application_user", (string)null);
                });

            modelBuilder.Entity("Priemka.Domain.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<bool>("OnVacation")
                        .HasColumnType("bit")
                        .HasColumnName("on_vacation");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("speciality");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "Priemka.Domain.Entities.Doctor.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("city");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("street");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Priemka.Domain.Entities.Doctor.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "Priemka.Domain.Entities.Doctor.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("last_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Phone", "Priemka.Domain.Entities.Doctor.Phone#Phone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("phone");
                        });

                    b.HasKey("Id");

                    b.ToTable("doctors", (string)null);
                });

            modelBuilder.Entity("Priemka.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Email", "Priemka.Domain.Entities.UserEntity.Email#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "Priemka.Domain.Entities.UserEntity.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("last_name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Role", "Priemka.Domain.Entities.UserEntity.Role#Role", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("role");

                            b1.Property<string>("Permissions")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("permissions");
                        });

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Priemka.Domain.Entities.Admin", b =>
                {
                    b.HasOne("Priemka.Domain.Entities.UserEntity", null)
                        .WithOne()
                        .HasForeignKey("Priemka.Domain.Entities.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Priemka.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Priemka.Domain.Entities.UserEntity", null)
                        .WithOne()
                        .HasForeignKey("Priemka.Domain.Entities.ApplicationUser", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Priemka.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Priemka.Domain.Entities.UserEntity", null)
                        .WithOne()
                        .HasForeignKey("Priemka.Domain.Entities.Doctor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Priemka.Domain.ValueObjects.Achivments", "Achivments", b1 =>
                        {
                            b1.Property<Guid>("DoctorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<DateTime?>("AchivmentDate")
                                .HasColumnType("datetime2");

                            b1.Property<string>("AchivmentName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("DoctorId", "Id");

                            b1.ToTable("doctors");

                            b1.ToJson("Achivments");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");
                        });

                    b.OwnsMany("Priemka.Domain.ValueObjects.WorkShedule", "WorkShedules", b1 =>
                        {
                            b1.Property<Guid>("DoctorId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<string>("DayOfWeek")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("ShiftEnd")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ShiftStart")
                                .HasColumnType("datetime2");

                            b1.HasKey("DoctorId", "Id");

                            b1.ToTable("doctors");

                            b1.ToJson("WorkShedules");

                            b1.WithOwner()
                                .HasForeignKey("DoctorId");
                        });

                    b.Navigation("Achivments");

                    b.Navigation("WorkShedules");
                });
#pragma warning restore 612, 618
        }
    }
}
